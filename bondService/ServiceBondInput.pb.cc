// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceBondInput.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServiceBondInput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BondServiceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BondServiceInput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ServiceBondInput_2eproto() {
  protobuf_AddDesc_ServiceBondInput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ServiceBondInput.proto");
  GOOGLE_CHECK(file != NULL);
  BondServiceInput_descriptor_ = file->message_type(0);
  static const int BondServiceInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, coupon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, payments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, interestrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, parvalue_),
  };
  BondServiceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BondServiceInput_descriptor_,
      BondServiceInput::default_instance_,
      BondServiceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BondServiceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BondServiceInput));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ServiceBondInput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BondServiceInput_descriptor_, &BondServiceInput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ServiceBondInput_2eproto() {
  delete BondServiceInput::default_instance_;
  delete BondServiceInput_reflection_;
}

void protobuf_AddDesc_ServiceBondInput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ServiceBondInput.proto\"j\n\020BondServiceI"
    "nput\022\014\n\004name\030\001 \001(\t\022\016\n\006coupon\030\002 \002(\002\022\020\n\010pa"
    "yments\030\003 \002(\005\022\024\n\014interestRate\030\004 \002(\002\022\020\n\010pa"
    "rValue\030\005 \002(\002", 132);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ServiceBondInput.proto", &protobuf_RegisterTypes);
  BondServiceInput::default_instance_ = new BondServiceInput();
  BondServiceInput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServiceBondInput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServiceBondInput_2eproto {
  StaticDescriptorInitializer_ServiceBondInput_2eproto() {
    protobuf_AddDesc_ServiceBondInput_2eproto();
  }
} static_descriptor_initializer_ServiceBondInput_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BondServiceInput::kNameFieldNumber;
const int BondServiceInput::kCouponFieldNumber;
const int BondServiceInput::kPaymentsFieldNumber;
const int BondServiceInput::kInterestRateFieldNumber;
const int BondServiceInput::kParValueFieldNumber;
#endif  // !_MSC_VER

BondServiceInput::BondServiceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BondServiceInput)
}

void BondServiceInput::InitAsDefaultInstance() {
}

BondServiceInput::BondServiceInput(const BondServiceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BondServiceInput)
}

void BondServiceInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coupon_ = 0;
  payments_ = 0;
  interestrate_ = 0;
  parvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BondServiceInput::~BondServiceInput() {
  // @@protoc_insertion_point(destructor:BondServiceInput)
  SharedDtor();
}

void BondServiceInput::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BondServiceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BondServiceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BondServiceInput_descriptor_;
}

const BondServiceInput& BondServiceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ServiceBondInput_2eproto();
  return *default_instance_;
}

BondServiceInput* BondServiceInput::default_instance_ = NULL;

BondServiceInput* BondServiceInput::New() const {
  return new BondServiceInput;
}

void BondServiceInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BondServiceInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(coupon_, parvalue_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BondServiceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BondServiceInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_coupon;
        break;
      }

      // required float coupon = 2;
      case 2: {
        if (tag == 21) {
         parse_coupon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coupon_)));
          set_has_coupon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_payments;
        break;
      }

      // required int32 payments = 3;
      case 3: {
        if (tag == 24) {
         parse_payments:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payments_)));
          set_has_payments();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_interestRate;
        break;
      }

      // required float interestRate = 4;
      case 4: {
        if (tag == 37) {
         parse_interestRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &interestrate_)));
          set_has_interestrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_parValue;
        break;
      }

      // required float parValue = 5;
      case 5: {
        if (tag == 45) {
         parse_parValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parvalue_)));
          set_has_parvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BondServiceInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BondServiceInput)
  return false;
#undef DO_
}

void BondServiceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BondServiceInput)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float coupon = 2;
  if (has_coupon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->coupon(), output);
  }

  // required int32 payments = 3;
  if (has_payments()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->payments(), output);
  }

  // required float interestRate = 4;
  if (has_interestrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->interestrate(), output);
  }

  // required float parValue = 5;
  if (has_parvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->parvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BondServiceInput)
}

::google::protobuf::uint8* BondServiceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BondServiceInput)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float coupon = 2;
  if (has_coupon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->coupon(), target);
  }

  // required int32 payments = 3;
  if (has_payments()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->payments(), target);
  }

  // required float interestRate = 4;
  if (has_interestrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->interestrate(), target);
  }

  // required float parValue = 5;
  if (has_parvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->parvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BondServiceInput)
  return target;
}

int BondServiceInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float coupon = 2;
    if (has_coupon()) {
      total_size += 1 + 4;
    }

    // required int32 payments = 3;
    if (has_payments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payments());
    }

    // required float interestRate = 4;
    if (has_interestrate()) {
      total_size += 1 + 4;
    }

    // required float parValue = 5;
    if (has_parvalue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BondServiceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BondServiceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BondServiceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BondServiceInput::MergeFrom(const BondServiceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_coupon()) {
      set_coupon(from.coupon());
    }
    if (from.has_payments()) {
      set_payments(from.payments());
    }
    if (from.has_interestrate()) {
      set_interestrate(from.interestrate());
    }
    if (from.has_parvalue()) {
      set_parvalue(from.parvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BondServiceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BondServiceInput::CopyFrom(const BondServiceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BondServiceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void BondServiceInput::Swap(BondServiceInput* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(coupon_, other->coupon_);
    std::swap(payments_, other->payments_);
    std::swap(interestrate_, other->interestrate_);
    std::swap(parvalue_, other->parvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BondServiceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BondServiceInput_descriptor_;
  metadata.reflection = BondServiceInput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
