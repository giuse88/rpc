// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceBondInput.proto

#ifndef PROTOBUF_ServiceBondInput_2eproto__INCLUDED
#define PROTOBUF_ServiceBondInput_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ServiceBondInput_2eproto();
void protobuf_AssignDesc_ServiceBondInput_2eproto();
void protobuf_ShutdownFile_ServiceBondInput_2eproto();

class BondServiceInput;

// ===================================================================

class BondServiceInput : public ::google::protobuf::Message {
 public:
  BondServiceInput();
  virtual ~BondServiceInput();

  BondServiceInput(const BondServiceInput& from);

  inline BondServiceInput& operator=(const BondServiceInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BondServiceInput& default_instance();

  void Swap(BondServiceInput* other);

  // implements Message ----------------------------------------------

  BondServiceInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BondServiceInput& from);
  void MergeFrom(const BondServiceInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float coupon = 2;
  inline bool has_coupon() const;
  inline void clear_coupon();
  static const int kCouponFieldNumber = 2;
  inline float coupon() const;
  inline void set_coupon(float value);

  // required int32 payments = 3;
  inline bool has_payments() const;
  inline void clear_payments();
  static const int kPaymentsFieldNumber = 3;
  inline ::google::protobuf::int32 payments() const;
  inline void set_payments(::google::protobuf::int32 value);

  // required float interestRate = 4;
  inline bool has_interestrate() const;
  inline void clear_interestrate();
  static const int kInterestRateFieldNumber = 4;
  inline float interestrate() const;
  inline void set_interestrate(float value);

  // required float parValue = 5;
  inline bool has_parvalue() const;
  inline void clear_parvalue();
  static const int kParValueFieldNumber = 5;
  inline float parvalue() const;
  inline void set_parvalue(float value);

  // @@protoc_insertion_point(class_scope:BondServiceInput)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_coupon();
  inline void clear_has_coupon();
  inline void set_has_payments();
  inline void clear_has_payments();
  inline void set_has_interestrate();
  inline void clear_has_interestrate();
  inline void set_has_parvalue();
  inline void clear_has_parvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  float coupon_;
  ::google::protobuf::int32 payments_;
  float interestrate_;
  float parvalue_;
  friend void  protobuf_AddDesc_ServiceBondInput_2eproto();
  friend void protobuf_AssignDesc_ServiceBondInput_2eproto();
  friend void protobuf_ShutdownFile_ServiceBondInput_2eproto();

  void InitAsDefaultInstance();
  static BondServiceInput* default_instance_;
};
// ===================================================================


// ===================================================================

// BondServiceInput

// optional string name = 1;
inline bool BondServiceInput::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BondServiceInput::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BondServiceInput::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BondServiceInput::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BondServiceInput::name() const {
  // @@protoc_insertion_point(field_get:BondServiceInput.name)
  return *name_;
}
inline void BondServiceInput::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:BondServiceInput.name)
}
inline void BondServiceInput::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:BondServiceInput.name)
}
inline void BondServiceInput::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BondServiceInput.name)
}
inline ::std::string* BondServiceInput::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BondServiceInput.name)
  return name_;
}
inline ::std::string* BondServiceInput::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BondServiceInput::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BondServiceInput.name)
}

// required float coupon = 2;
inline bool BondServiceInput::has_coupon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BondServiceInput::set_has_coupon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BondServiceInput::clear_has_coupon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BondServiceInput::clear_coupon() {
  coupon_ = 0;
  clear_has_coupon();
}
inline float BondServiceInput::coupon() const {
  // @@protoc_insertion_point(field_get:BondServiceInput.coupon)
  return coupon_;
}
inline void BondServiceInput::set_coupon(float value) {
  set_has_coupon();
  coupon_ = value;
  // @@protoc_insertion_point(field_set:BondServiceInput.coupon)
}

// required int32 payments = 3;
inline bool BondServiceInput::has_payments() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BondServiceInput::set_has_payments() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BondServiceInput::clear_has_payments() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BondServiceInput::clear_payments() {
  payments_ = 0;
  clear_has_payments();
}
inline ::google::protobuf::int32 BondServiceInput::payments() const {
  // @@protoc_insertion_point(field_get:BondServiceInput.payments)
  return payments_;
}
inline void BondServiceInput::set_payments(::google::protobuf::int32 value) {
  set_has_payments();
  payments_ = value;
  // @@protoc_insertion_point(field_set:BondServiceInput.payments)
}

// required float interestRate = 4;
inline bool BondServiceInput::has_interestrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BondServiceInput::set_has_interestrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BondServiceInput::clear_has_interestrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BondServiceInput::clear_interestrate() {
  interestrate_ = 0;
  clear_has_interestrate();
}
inline float BondServiceInput::interestrate() const {
  // @@protoc_insertion_point(field_get:BondServiceInput.interestRate)
  return interestrate_;
}
inline void BondServiceInput::set_interestrate(float value) {
  set_has_interestrate();
  interestrate_ = value;
  // @@protoc_insertion_point(field_set:BondServiceInput.interestRate)
}

// required float parValue = 5;
inline bool BondServiceInput::has_parvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BondServiceInput::set_has_parvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BondServiceInput::clear_has_parvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BondServiceInput::clear_parvalue() {
  parvalue_ = 0;
  clear_has_parvalue();
}
inline float BondServiceInput::parvalue() const {
  // @@protoc_insertion_point(field_get:BondServiceInput.parValue)
  return parvalue_;
}
inline void BondServiceInput::set_parvalue(float value) {
  set_has_parvalue();
  parvalue_ = value;
  // @@protoc_insertion_point(field_set:BondServiceInput.parValue)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ServiceBondInput_2eproto__INCLUDED
